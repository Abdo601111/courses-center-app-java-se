/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ga.tc.courses.ui;

import com.ga.tc.authentication.bao.UserBaoImpl;
import com.ga.tc.authentication.dto.UserInfoDto;
import com.ga.tc.common.Constants;
import com.ga.tc.common.GenericDto;
import com.ga.tc.common.LAF;
import com.ga.tc.courses.bao.CourseBaoImpl;
import com.ga.tc.courses.dto.CourseInfoDto;
import com.ga.tc.courses.ui.tables.models.CourseTableCellEditor;
import com.ga.tc.courses.ui.tables.models.CourseTableCellRenderer;
import com.ga.tc.courses.ui.tables.models.CourseTableModel;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Vector;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

/**
 *
 * @author pc
 */
public class CoursesManager extends javax.swing.JPanel {
    private CourseBaoImpl courseBusiness = new CourseBaoImpl();
    private UserBaoImpl userBusiness = new UserBaoImpl();
    
    private List<UserInfoDto> allInstructors = userBusiness.listAllInstructors();
    private UserInfoDto loggedInUser;
    /**
     * Creates new form CourcesManager
     */
    public CoursesManager(UserInfoDto loggedInUser) {
        this.loggedInUser = loggedInUser;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cInstructorsCombo = new javax.swing.JComboBox<>();
        cHrs = new javax.swing.JTextField();
        cId = new javax.swing.JTextField();
        cName = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        cDescription = new javax.swing.JTextArea();
        cIsActive = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        cStartDate = new com.toedter.calendar.JDateChooser();
        cEndDate = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        courseTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        searchFilterCombo = new javax.swing.JComboBox<>();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Cources Manager"));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Course Information"));

        jLabel1.setText("#");

        jLabel2.setText("Name");

        jLabel3.setText("Description");

        jLabel4.setText("Active?");

        jLabel5.setText("# of Hrs");

        jLabel6.setText("Instructor");

        jLabel7.setText("Start Date (dd-MM-YYYY)");

        jLabel8.setText("End Date  (dd-MM-YYYY)");

        fillInInstructorsList();

        cId.setEditable(false);

        cDescription.setColumns(20);
        cDescription.setRows(5);
        jScrollPane2.setViewportView(cDescription);

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        cStartDate.setDateFormatString("dd-MM-yyyy");

        cEndDate.setDateFormatString("dd-MM-yyyy");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(cId)
                            .addComponent(cName))
                        .addGap(59, 59, 59)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cIsActive)
                            .addComponent(cInstructorsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cHrs, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cStartDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cEndDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(176, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5)
                    .addComponent(cHrs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cInstructorsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(cEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cIsActive)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jButton1))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Courses List"));

        courseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        fillInCourseTable();
        jScrollPane1.setViewportView(courseTable);

        jLabel9.setText("Search Filter :");

        searchFilterCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        fillInSearchFilters();
        searchFilterCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFilterComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 724, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchFilterCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(searchFilterCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchFilterComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFilterComboActionPerformed
        try{
            GenericDto selection = (GenericDto)searchFilterCombo.getSelectedItem();
            allCourse = courseBusiness.listAll(selection.getValue());
            courseTable.setModel(new CourseTableModel(allCourse));
        }catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error occured:+\n"+e.getMessage());
                    
        }
        
    }//GEN-LAST:event_searchFilterComboActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
            StringBuilder errorSb = new StringBuilder();
            //validation
            if(cName.getText().trim().equals("")){
                errorSb.append("- Name is Required");
            }
            if(cHrs.getText().trim().equals("")){
                errorSb.append("- No. of hours is Required");
            }
            if(((UserInfoDto)cInstructorsCombo.getSelectedItem()).getId().equals(-1)){
                errorSb.append("- Instructor is Required");
            }
            if(errorSb.toString().equals("")){
                //No validation errors
                CourseInfoDto newCourse = new CourseInfoDto(-1,"");
                newCourse.setName(cName.getText().trim());
                newCourse.setDescription(cDescription.getText().trim());
                newCourse.setTotalHrs(Integer.parseInt(cHrs.getText().trim()));
                
                //date format
                DateFormat format= new SimpleDateFormat("dd-MM-yyyy");
                String date = null;
                if(cStartDate != null && !cStartDate.getDate().toString().trim().equals("")){
//                    date = cStartDate.getText().trim();
                    newCourse.setStartDate(cStartDate.getDate());
                }
                if(cEndDate != null && !cEndDate.getDate().toString().trim().equals("")){
//                    date = cEndDate.getText().trim();
                    newCourse.setEndDate(cEndDate.getDate());
                }
                newCourse.setInstructor((UserInfoDto)cInstructorsCombo.getSelectedItem());
                newCourse.setCreatedBy(loggedInUser);
                if(courseBusiness.save(newCourse)>0){
                    cName.setText("");
                    cDescription.setText("");
                    cStartDate.setDate(null);
                    cEndDate.setDate(null);
                    cInstructorsCombo.setSelectedIndex(0);
                    cHrs.setText("");
                    allCourse.add(newCourse);
                    courseTable.setModel(new CourseTableModel(allCourse));
                    JOptionPane.showMessageDialog(this, "Course Saved successfully");
                }
            }else{
                //validation error
                JOptionPane.showMessageDialog(this, "Validation error:\n"+errorSb.toString());
            }
            //end of validation
//        }catch(ParseException e){
//            JOptionPane.showMessageDialog(this, "Start and End dates must be in <dd-MM-YYYY> format!!!");
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(this, "Total hours is a number!");
        }catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error occured:+\n"+e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea cDescription;
    private com.toedter.calendar.JDateChooser cEndDate;
    private javax.swing.JTextField cHrs;
    private javax.swing.JTextField cId;
    private javax.swing.JComboBox<UserInfoDto> cInstructorsCombo;
    private javax.swing.JCheckBox cIsActive;
    private javax.swing.JTextField cName;
    private com.toedter.calendar.JDateChooser cStartDate;
    private javax.swing.JTable courseTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> searchFilterCombo;
    // End of variables declaration//GEN-END:variables
    private List<CourseInfoDto> allCourse;
    private void fillInCourseTable() {
      try{
          allCourse = courseBusiness.listAll(Constants.STATUS_LIST_ALL);
          
          if(allCourse != null && !allCourse.isEmpty())
          for(int index=0; index<allCourse.size();index++)
              for(UserInfoDto u:allInstructors)
                  if(u.getId().equals(allCourse.get(index).getInstructor().getId())){
                      allCourse.get(index).setInstructor(u);
                  }
              
          courseTable.setModel(new CourseTableModel(allCourse));
          courseTable.setDefaultRenderer(UserInfoDto.class, new CourseTableCellRenderer());
          courseTable.setDefaultEditor(UserInfoDto.class, new CourseTableCellEditor(null, allInstructors));
      }catch(Exception e){
          e.printStackTrace();
      }
    }

    private void fillInSearchFilters() {
        Vector<GenericDto> model = new Vector<>();
        model.addElement(new GenericDto("All", Constants.STATUS_LIST_ALL));
        model.addElement(new GenericDto("Active", Constants.STATUS_ACTIVE));
        model.addElement(new GenericDto("Inactive", Constants.STATUS_INACTIVE));
        searchFilterCombo = new JComboBox(model);
    }

    private void fillInInstructorsList() {
        cInstructorsCombo = new JComboBox<UserInfoDto>();
        cInstructorsCombo.addItem(new UserInfoDto(-1));
        for(UserInfoDto u : allInstructors){
            cInstructorsCombo.addItem(u);
        }
        
    }
    
}
